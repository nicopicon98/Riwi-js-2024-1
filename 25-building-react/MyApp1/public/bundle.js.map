{
  "version": 3,
  "sources": ["../reactivity/src/core/currentComponent.js", "../reactivity/src/core/component.js", "../reactivity/src/hooks/useState.js", "../reactivity/src/hooks/useEffect.js", "../src/App.js", "../src/main.js"],
  "sourcesContent": ["let currentComponent = null;\r\n\r\nexport function getCurrentComponent() {\r\n  return currentComponent;\r\n}\r\n\r\nexport function setCurrentComponent(component) {\r\n  currentComponent = component;\r\n}\r\n", "import { getCurrentComponent, setCurrentComponent } from './currentComponent.js';\r\n\r\nexport class Component {\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._state = {};\r\n    this._dependencies = [];\r\n    this._memo = null;\r\n  }\r\n\r\n  // M\u00E9todo para actualizar el componente\r\n  update() {\r\n    setCurrentComponent(this); // Establecer currentComponent antes de renderizar\r\n    const container = this._container;\r\n    container.innerHTML = this.render();\r\n    setCurrentComponent(null); // Restablecer currentComponent despu\u00E9s de renderizar\r\n  }\r\n\r\n  // M\u00E9todo para montar el componente en un contenedor\r\n  mount(container) {\r\n    this._container = container;\r\n    this.update(); // Llamar a update para montar el componente\r\n  }\r\n\r\n  // M\u00E9todo render que ser\u00E1 implementado por los componentes hijos\r\n  render() {\r\n    throw new Error('Render method should be implemented by the component');\r\n  }\r\n}\r\n", "import { getCurrentComponent } from '../core/currentComponent.js';\r\n\r\nexport function useState(initialValue) {\r\n  const currentComponent = getCurrentComponent();\r\n  if (currentComponent === null) {\r\n    throw new Error(\"useState must be used within a component's render method\");\r\n  }\r\n\r\n  // Obtener el estado actual del componente, o usar el valor inicial si no hay estado\r\n  const state = currentComponent._state || initialValue;\r\n\r\n  // Funci\u00F3n para actualizar el estado\r\n  const setState = newValue => {\r\n    currentComponent._state = newValue; // Actualizar el estado del componente actual con el nuevo valor\r\n    currentComponent.update(); // Re-renderizar el componente para reflejar el nuevo estado\r\n  };\r\n\r\n  return [state, setState]; // Retornar el estado actual y la funci\u00F3n para actualizar el estado\r\n}\r\n\r\n// Vamos a explicar el c\u00F3digo anterior:\r\n\r\n// 1. Importamos `getCurrentComponent` para obtener la referencia al componente actual.\r\n// 2. La funci\u00F3n `useState` recibe un valor inicial y retorna un array con dos elementos: el estado actual y la funci\u00F3n para actualizar el estado.\r\n// 3. Obtenemos el componente actual llamando a `getCurrentComponent`. Si `currentComponent` es `null`, lanzamos un error indicando que `useState` debe ser usado dentro del m\u00E9todo `render` de un componente.\r\n// 4. Obtenemos el estado actual del componente actual. Si el componente no tiene un estado, usamos el valor inicial.\r\n// 5. Creamos la funci\u00F3n `setState` que recibe un nuevo valor y actualiza el estado del componente actual, luego llama al m\u00E9todo `update` del componente actual para re-renderizar el componente.\r\n// 6. Finalmente, retornamos el estado actual y la funci\u00F3n `setState`.\r\n", "import { getCurrentComponent } from '../core/currentComponent.js';\r\n\r\nexport function useEffect(callback, dependencies) {\r\n  const currentComponent = getCurrentComponent();\r\n  if (currentComponent === null) {\r\n    throw new Error(\"useEffect must be used within a component's render method\");\r\n  }\r\n\r\n  // Determinar si las dependencias han cambiado\r\n  const hasChanged = dependencies.some((dep, i) => dep !== currentComponent._dependencies[i]);\r\n\r\n  // Si las dependencias han cambiado, ejecutar el callback\r\n  if (hasChanged) {\r\n    callback();\r\n    currentComponent._dependencies = dependencies; // Actualizar las dependencias\r\n  }\r\n}\r\n\r\n// Vamos a explicar el c\u00F3digo anterior:\r\n\r\n// 1. Importamos `getCurrentComponent` para obtener la referencia al componente actual.\r\n// 2. La funci\u00F3n `useEffect` recibe un `callback` que se ejecutar\u00E1 cuando las dependencias cambien, y un array de `dependencies`.\r\n// 3. Obtenemos el componente actual llamando a `getCurrentComponent`. Si `currentComponent` es `null`, lanzamos un error indicando que `useEffect` debe ser usado dentro del m\u00E9todo `render` de un componente.\r\n// 4. Verificamos si alguna de las dependencias ha cambiado en comparaci\u00F3n con las dependencias guardadas anteriormente en `currentComponent._dependencies`.\r\n// 5. Si alguna dependencia ha cambiado, ejecutamos el `callback` y actualizamos `currentComponent._dependencies` con las nuevas dependencias.\r\n", "import { Component, useState, useEffect } from '../reactivity/index.js';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this._state = {};\r\n    this._dependencies = [];\r\n    this._memo = null;\r\n  }\r\n\r\n  render() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n      console.log('Count changed:', count);\r\n    }, [count]);\r\n\r\n    return `\r\n      <div>\r\n        <p>Hello world from reactivity</p>\r\n        <p>Count: ${count}</p>\r\n        <button onclick=\"(${() => setCount(count + 1)})()\">Increment</button>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\nexport default App;\r\n", "import { mount } from '../reactivity/index.js';\r\nimport App from './App.js';\r\n\r\nconst app = new App();\r\nconst container = document.getElementById('app');\r\napp.mount(container);\r\n"],
  "mappings": "MAAA,IAAIA,EAAmB,KAEhB,SAASC,GAAsB,CACpC,OAAOD,CACT,CAEO,SAASE,EAAoBC,EAAW,CAC7CH,EAAmBG,CACrB,CCNO,IAAMC,EAAN,KAAgB,CACrB,YAAYC,EAAO,CACjB,KAAK,MAAQA,EACb,KAAK,OAAS,CAAC,EACf,KAAK,cAAgB,CAAC,EACtB,KAAK,MAAQ,IACf,CAGA,QAAS,CACPC,EAAoB,IAAI,EACxB,IAAMC,EAAY,KAAK,WACvBA,EAAU,UAAY,KAAK,OAAO,EAClCD,EAAoB,IAAI,CAC1B,CAGA,MAAMC,EAAW,CACf,KAAK,WAAaA,EAClB,KAAK,OAAO,CACd,CAGA,QAAS,CACP,MAAM,IAAI,MAAM,sDAAsD,CACxE,CACF,EC1BO,SAASC,EAASC,EAAc,CACrC,IAAMC,EAAmBC,EAAoB,EAC7C,GAAID,IAAqB,KACvB,MAAM,IAAI,MAAM,0DAA0D,EAY5E,MAAO,CAROA,EAAiB,QAAUD,EAGxBG,GAAY,CAC3BF,EAAiB,OAASE,EAC1BF,EAAiB,OAAO,CAC1B,CAEuB,CACzB,CChBO,SAASG,EAAUC,EAAUC,EAAc,CAChD,IAAMC,EAAmBC,EAAoB,EAC7C,GAAID,IAAqB,KACvB,MAAM,IAAI,MAAM,2DAA2D,EAI1DD,EAAa,KAAK,CAACG,EAAKC,IAAMD,IAAQF,EAAiB,cAAcG,CAAC,CAAC,IAIxFL,EAAS,EACTE,EAAiB,cAAgBD,EAErC,CCdA,IAAMK,EAAN,cAAkBC,CAAU,CAC1B,aAAc,CACZ,MAAM,EACN,KAAK,OAAS,CAAC,EACf,KAAK,cAAgB,CAAC,EACtB,KAAK,MAAQ,IACf,CAEA,QAAS,CACP,GAAM,CAACC,EAAOC,CAAQ,EAAIC,EAAS,CAAC,EAEpC,OAAAC,EAAU,IAAM,CACd,QAAQ,IAAI,iBAAkBH,CAAK,CACrC,EAAG,CAACA,CAAK,CAAC,EAEH;AAAA;AAAA;AAAA,oBAGSA,CAAK;AAAA,4BACG,IAAMC,EAASD,EAAQ,CAAC,CAAC;AAAA;AAAA,KAGnD,CACF,EAEOI,EAAQN,ECxBf,IAAMO,EAAM,IAAIC,EACVC,EAAY,SAAS,eAAe,KAAK,EAC/CF,EAAI,MAAME,CAAS",
  "names": ["currentComponent", "getCurrentComponent", "setCurrentComponent", "component", "Component", "props", "setCurrentComponent", "container", "useState", "initialValue", "currentComponent", "getCurrentComponent", "newValue", "useEffect", "callback", "dependencies", "currentComponent", "getCurrentComponent", "dep", "i", "App", "Component", "count", "setCount", "useState", "useEffect", "App_default", "app", "App_default", "container"]
}
